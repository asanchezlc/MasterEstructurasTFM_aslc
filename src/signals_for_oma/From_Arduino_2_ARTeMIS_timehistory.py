
import matplotlib.pyplot as plt
import os

import helpers.outils as outils
import helpers.classes as classes

"""
From txt generated by time history analysis, generate the UFF file
File used to get data from arduino recordments (in DOCTORADO_CODES/OMA) to be used in this project)

- Correct timestamps
- Filter Outliers
- Save in a csv with appropiate headers
- Save metadata in a json file
"""
# ---------------------------------------------------------------
# Configuration
# ---------------------------------------------------------------
# File names:
"""
There must be always one recording in rawdata_strain paht.
Additionally, it will be checked if there is a recording in rawdata_acc path
    called test_name + '_acc.txt'
"""
test_name = 'test3'
latex_style = True
sg_info_name = 'sg_channels_info.csv'
project_name = 'SAP2000 FOOTBRIDGE - OMA BY STRAIN GAUGES'  # for UFF file
simulated_data = True

# Input and output paths
username = outils.get_username()
config = outils.read_config_file(os.path.join(
    'src', 'signals_for_oma', 'paths', username + '.txt'))
rawdata_strain = config['rawdata_strain_simulated_oma']
savedata = config['savedata_simulated_oma']
savefigures = config['savefigures_simulated_oma']

# Latex style
classes.use_latex_style(latex_style)
# ---------------------------------------------------------------

parameters_name = test_name + '_metadata'
data_type = 'Strain'
units = 'm/m'

# Signal Processing
processor = classes.SignalProcessing(test_name, parameters_name, sg_info_name,
                                     rawdata_strain, savedata, savefigures)
processor.check_files_existence()
processor.create_folders()
processor.read_raw_files()
fig_all, ax_all = processor.plot_raw_data()
plt.close('all')
processor.filter_signal()
if processor.input_parameters['apply_outliers']:
    fig_all, ax_all = processor.plot_outliers_results()
plt.close('all')
fig_all, ax_all = processor.plot_filter_results()
plt.close('all')
if data_type == 'Strain':
    processor.get_strain_data()
else:
    processor.get_acc_data(already_detrended=True)
processor.save_measurement_data()
processor.save_test_info_summary(data_type=data_type, units=units)

# Fast PSD and SVD
analysis = classes.SignalAnalysis(test_name, savefigures, savedata)
analysis.compute_psd_svd(pov=0.5, df=0.01)
fig, ax = analysis.plot_psd_matrix(fmax=40)
analysis.get_channel_power()
fig, ax = analysis.plot_sv(fmax=25)
plt.close('all')

# UFF Generation
uff_generator = classes.UFFGenerator(
    test_name, project_name, savedata, savedata)
uff_generator.check_files_existence()
uff_generator.read_files()
uff_generator.remove_existing_uff_file()
uff_generator.generate_uff_data()
